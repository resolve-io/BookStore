plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.resolve'
version = '0.0.1'

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	ui
	runtimeClasspath.extendsFrom ui
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	ui project(":frontend")
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-integration'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.integration:spring-integration-http'
	implementation 'org.springframework.integration:spring-integration-jdbc'
	implementation 'org.springframework.integration:spring-integration-jpa'
	implementation 'org.springframework.integration:spring-integration-webflux'
	implementation 'org.springframework.security:spring-security-messaging'
	implementation 'org.springframework.security:spring-security-messaging'

	implementation 'org.hibernate:hibernate-validator:8.0.1.Final'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.integration:spring-integration-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// SpringBoot Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4'

	// Security
	// Add jjwt-api for the API interfaces
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'

	// Add jjwt-impl for the default implementation of the API
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'

	// If you're using Jackson for JSON processing
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'

	// Servlet API dependency
	implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

jar {
	dependsOn(":frontend:jar")

	from {
		configurations.ui.collect {
			zipTree(it)
		}
	}
}

tasks.register('dockerImage', Exec) {
	dependsOn bootJar

	inputs.files("Dockerfile", "entrypoint.sh")

	def imageName = System.getProperty("imageName") ? System.getProperty("imageName")
			: "nexus-insights.resolvesys.com:8443/resolve-io/bookstore:$version"
	def jarFile = bootJar.archiveFileName.get()
	def jarFilePath = projectDir.toPath().relativize(projectDir.toPath().resolve("build").resolve("libs").resolve(jarFile)).toString().replace('\\', '/')

	commandLine "docker", "build", "--build-arg", "JAR_FILE=$jarFilePath", "-t", "$imageName", "."
}
